/**
 * software for projectmanagement and documentation
 *
 * @FeatureDomain                Collaboration
 * @author                       Michael Schreiner <michael.schreiner@your-it-fellow.de>
 * @category                     collaboration
 * @copyright                    Copyright (c) 2014, Michael Schreiner
 * @license                      http://mozilla.org/MPL/2.0/ Mozilla Public License 2.0
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
package de.yaio.app.extension.datatransfer.file;

import de.yaio.app.core.datadomain.ResIndexData;
import de.yaio.app.core.node.BaseNode;
import de.yaio.app.core.node.UrlResNode;
import de.yaio.app.core.nodeservice.NodeService;
import de.yaio.app.core.nodeservice.UrlResNodeService;
import de.yaio.app.extension.dms.services.ResContentDataService;
import de.yaio.commons.io.IOExceptionWithCause;
import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Map;

import static de.yaio.app.extension.autoformatter.formatter.FileDescAutoFormatter.COMMAND_DO_AUTO_GENERATE_DESC;

/**
 * convert files to UrlResNodes
 */
@Service
public class FileConverter {
    @Autowired
    private ResContentDataService resContentService;

    // Logger
    private static final Logger LOGGER = Logger.getLogger(FileConverter.class);

    /**
     * convert files to UrlResNode and append them to the parent
     * @param parent                 parent to add the files as UrlResNode
     * @param files                  files to import <importfileName, origFileName>
     * @throws IOExceptionWithCause  possible IOExceptions
     */
    public void importFilesToParent(final BaseNode parent, final Map<String, String> files, final String formatProfile)
            throws IOExceptionWithCause {
        for (String file : files.keySet()) {
            BaseNode newNode = convertFileToBaseNode(file, files.get(file), formatProfile);
            newNode.setParentNode(parent);
        }
        parent.recalcData(NodeService.RecalcRecurseDirection.CHILDREN);
    }

    /**
     * convert file to UrlResNode
     * @param file                   file to convert
     * @param origFileName           origFileName
     * @param formatProfile          profile for AutoGenerateDesc (NODESC, WITHEXTRACTED...)
     * @return                       converted email
     * @throws IOExceptionWithCause  possible IOExceptions
     */
    protected BaseNode convertFileToBaseNode(final String file, final String origFileName, final String formatProfile) throws IOExceptionWithCause {
        UrlResNode node = new UrlResNode();
        try {
            node.setEbene(0);
            node.setType(UrlResNodeService.CONST_NODETYPE_IDENTIFIER_FILERES);
            node.setMetaNodeSubType("UrlResNodeMetaNodeSubType." + node.getType());
            node.setState(node.getType());
            node.initSysData(true);
            node.setNodeDesc("");

            File tmpFile = new File(file);
            String fileName = origFileName;
            fileName = fileName.replaceAll("\\.(?=.*\\.)", "_");
            fileName = fileName.replaceAll("[^a-zA-Z0-9-.]", "_");

            node.setName("File: " + fileName);
            node.setResLocName("File");
            node.setResLocRef(fileName);
            if (!StringUtils.isEmpty(formatProfile)) {
                String safeFormatProfile = formatProfile.replaceAll("[^A-Za-z,0-9]", "");
                node.setNodeDesc("<!---" + COMMAND_DO_AUTO_GENERATE_DESC + " " + safeFormatProfile + " --->\n");
            }

            // save to dms
            resContentService.uploadResContentToDMS(node, fileName, new FileInputStream(tmpFile));
            node.setResIndexDMSState(ResIndexData.IndexWorkflowState.INDEX_OPEN);
            LOGGER.info("converted file to node:" + node.getNameForLogger());
        } catch (IOException ex) {
            throw new IOExceptionWithCause("could open file", file, ex);
        }

        return node;
    }
}