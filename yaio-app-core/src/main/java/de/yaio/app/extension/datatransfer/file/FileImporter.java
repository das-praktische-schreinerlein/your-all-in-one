/**
 * software for projectmanagement and documentation
 *
 * @FeatureDomain                Collaboration
 * @author                       Michael Schreiner <michael.schreiner@your-it-fellow.de>
 * @category                     collaboration
 * @copyright                    Copyright (c) 2014, Michael Schreiner
 * @license                      http://mozilla.org/MPL/2.0/ Mozilla Public License 2.0
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
package de.yaio.app.extension.datatransfer.file;

import de.yaio.app.core.dbservice.BaseNodeRepository;
import de.yaio.app.core.node.BaseNode;
import de.yaio.app.core.nodeservice.NodeService;
import de.yaio.app.extension.autoformatter.formatter.FileDescAutoFormatter;
import de.yaio.commons.io.IOExceptionWithCause;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Map;
import java.util.NoSuchElementException;

/**
 * import files
 *
 */
@Service
public class FileImporter {
    @Autowired
    private FileConverter fileConverterService;
    @Autowired
    protected FileDescAutoFormatter fileFormatterService;
    @Autowired
    protected BaseNodeRepository baseNodeDBService;

    // Logger
    private static final Logger LOGGER = Logger.getLogger(FileImporter.class);

    /**
     * import files  and append them to sysUID
     * @param parentSysUID            sysUID of the basenode to which files will be append
     * @param files                   files to import <importfileName, origFileName>
     * @param formatProfile           profile for AutoGenerateDesc (NODESC, WITHEXTRACTED...)
     * @throws IOExceptionWithCause   if reading of files  went wrong
     */
    public void importFiles(final String parentSysUID, final Map<String, String> files, final String formatProfile) throws IOExceptionWithCause {
        BaseNode parent = baseNodeDBService.findBaseNode(parentSysUID);
        if (parent == null) {
            throw new IOExceptionWithCause("parentSysUID not found", parentSysUID, new NoSuchElementException());
        }

        fileConverterService.importFilesToParent(parent, files, formatProfile);
        fileFormatterService.genMetadataForNodes(parent.getChildNodes());

        baseNodeDBService.saveChildNodesToDB(parent, NodeService.CONST_DB_RECURSIONLEVEL_ALL_CHILDREN, false);
        baseNodeDBService.updateMeAndMyParents(parent);
        LOGGER.info("loaded " + files.size() + " files:" + files);
    }
}

